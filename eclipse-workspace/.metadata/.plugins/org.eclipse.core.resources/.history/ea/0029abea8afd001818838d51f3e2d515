#include <stdio.h> // in/out
#include <stdlib.h> // malloc itp
#include <errno.h> // numer bledu
#include <string.h> // memcpy
#include <sys/socket.h> // deifniuje socklen_t
#include <linux/if_ether.h> // ethernet
#include "ipv6.h" //naglowek


int iDataLen = 0;

struct listaprzejscie *adres_zakotwiczenia = NULL;
  struct listaprzejscie *adres_obecny = NULL;
  struct listaprzejscie *adres_ostatni = NULL;
  struct listaprzejscie *usun = NULL;

  unsigned char dane[1500];



void IPv6(unsigned char* dane[1500],int iDataLen)
{

    for (int i=0;i<20;i++)
     {
         if(adres_zakotwiczenia == NULL) //jeśli lista jest pusta
         {
             adres_zakotwiczenia = (struct listaprzejscie*) malloc(sizeof(struct listaprzejscie)); //przydzielenie pamieci dla elementu listy
             adres_obecny = adres_zakotwiczenia;
             adres_obecny->pierwszy = adres_zakotwiczenia;
             adres_obecny->nastepny = NULL;
             adres_obecny->poprzedni = NULL;
             memcpy (adres_obecny->bufor, dane, 1500);
             adres_obecny= NULL;

         }
         else
         {
             adres_ostatni = adres_zakotwiczenia;
             for (int j=0;j<20;j++)
             {
                 if (adres_ostatni->nastepny != NULL)
                 {
                     adres_ostatni = adres_ostatni->nastepny;
                 }
                 else
                     break;
             }
         adres_obecny = (struct listaprzejscie*) malloc(sizeof(struct listaprzejscie));
         adres_ostatni->nastepny = adres_obecny;
         adres_obecny->pierwszy = adres_zakotwiczenia;
         adres_obecny->nastepny = NULL;
         adres_obecny->poprzedni = adres_ostatni;
         memcpy (adres_obecny->bufor, dane, 1500);

         }
     }

}

void typ(unsigned char* buffer,int iDataLen)
{
	if ((*(buffer + 12) == 0x08) && (*(buffer + 13) == 0x00) && (*(buffer + 23) == 0x08))
	{
		printf("Odebrano pakiet EGP o rozmiarze [B] %d \n",iDataLen);
	}
	else if ((*(buffer + 12) == 0x08) && (*(buffer + 13) == 0x00) && (*(buffer + 23) == 0x02))
		{
			printf("Odebrano pakiet IGMP  o rozmiarze [B] %d \n",iDataLen);
		}
	else if ((*(buffer + 12) == 0x08) && (*(buffer + 13) == 0x00) && (*(buffer + 23) == 0x01))
		{
			printf("Odebrano pakiet ICMP o rozmiarze [B] %d \n",iDataLen);
		}
	else
			{
				printf("Odebrano inny pakiet o rozmiarze [B] %d \n", iDataLen);
			}

}
int main(void)
{
	int i = 1;
	printf("Uruchamiam odbieranie ramek Ethernet.\n"); /* prints */
	//Utworzenie bufora dla odbieranych ramek Ethernet

	unsigned char* buffer = (void*) malloc(ETH_FRAME_LEN);
	//Otwarcie gniazda pozwalającego na odbiór wszystkich ramek Ethernet
	int iEthSockHandl = socket(AF_PACKET, SOCK_RAW, htons(ETH_P_ALL));
	//Kontrola czy gniazdo zostało otwarte poprawnie, w przypadku bledu wyświetlenie komunikatu.
		if (iEthSockHandl<0)
		printf("Problem z otwarciem gniazda : %s!\n", strerror(errno));
		//Zmienna do przechowywania rozmiaru odebranych danych
		int iDataLen = 0;
		//Pętla nieskończona do odbierania ramek Ethernet
			while (1) {
			//Odebranie ramki z utworzonego wcześniej gniazda i zapisanie jej do bufora
			iDataLen = recvfrom(iEthSockHandl, buffer, ETH_FRAME_LEN, 0, NULL, NULL);
			//Kontrola czy nie było bledu podczas odbierania ramki
				if (iDataLen == -1)
				printf("Nie moge odebrac ramki: %s! \n", strerror(errno));
				else { //jeśli ramka odebrana poprawnie wyświetlenie jej zawartości
					typ(buffer,iDataLen);
					if ((*(buffer + 12) == 0x86) && (*(buffer + 13) == 0xdd))
					{
						printf("Odebrano pakiet IPv6 o rozmiarze %d [B]: \n",iDataLen);
/*						i = i + 1;
							if (i <= 20)
							{
								IPv6(buffer + 34,iDataLen);
							}
							} else{

					}*/

			}
	}
return EXIT_SUCCESS;
}
